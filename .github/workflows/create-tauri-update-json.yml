name: Create Tauri Update Json

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag name of the release'
        required: true
        default: main-desktop

jobs:
  get-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Release Assets
        id: get_assets
        uses: actions/github-script@v6
        with:
          script: |
            const headers = {
            Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
            Accept: 'application/vnd.github.v3+json'
            };

            const req = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/releases/tags/` + '${{ github.event.inputs.release_tag }}', { headers })
            const release = await req.json()

            const releaseTitle = release.name;

            const version = releaseTitle.split(' v')[1];

            const updateJson = {
              "version": `v${version}`,
              "notes": "Check all changes at https://yup.live/change-log",
              "platforms": {
                "darwin-x86_64": {
                  "signature": "==",
                  "url": ""
                },
                "linux-x86_64": {
                  "signature": "",
                  "url": ""
                },
                "windows-x86_64": {
                  "signature": "=",
                  "url": ""
                }
              }
            }
            
            let tarApp = ''
            let tarSig = ''
            let appImage = ''
            let appImageSig = ''
            let msi = ''
            let msiSig = ''

            for (const asset of release.assets) {
              let sigContent = ''
              if(asset.name.includes('.sig')) {
                const req = await fetch(asset.browser_download_url, { headers })
                sigContent = await req.text()
              }
              if (asset.name.includes('app.tar.gz.sig')) {
                tarSig = sigContent
              }else if (asset.name.includes('app.tar.gz')) {
                tarApp = asset.browser_download_url
              } else if (asset.name.includes('AppImage.tar.gz.sig')) {
                appImageSig = sigContent
              } else if (asset.name.includes('AppImage.tar.gz')) {
                appImage = asset.browser_download_url
              } else if (asset.name.includes('msi.zip.sig')) {
                msiSig = sigContent
              } else if (asset.name.includes('.msi.zip')) {
                msi = asset.browser_download_url
              } 
            }

            updateJson.platforms['darwin-x86_64'].signature = tarSig
            updateJson.platforms['darwin-x86_64'].url = tarApp
            updateJson.platforms['linux-x86_64'].signature = appImageSig
            updateJson.platforms['linux-x86_64'].url = appImage
            updateJson.platforms['windows-x86_64'].signature = msiSig
            updateJson.platforms['windows-x86_64'].url = msi

            const updateJsonString = JSON.stringify(updateJson, null, 2)
            console.log(updateJsonString)

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
